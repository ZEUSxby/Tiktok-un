
# Encode File BY : ChatGPT
import sys, os, base64

PYTHON_VERSION = ".".join(sys.version.split()[0].split(".")[:-1])

if PYTHON_VERSION != '3.13':
    print("[!] Python sürümü uyumsuz")
    exit(0)

payload = 'I9mF2LPZhdmI2K0g2KrYutmK2LEg2K3ZgtmI2YIg2KjYsyDYutmK2LEg2YXYqNix2Yog2KfZhNiw2YXYqSDYp9iw2Kcg2KrYqNi52YrYqQojQFFRWjk5CmltcG9ydCB0ZWxlYm90CmZyb20gdGVsZWJvdC50eXBlcyBpbXBvcnQgSW5saW5lS2V5Ym9hcmRNYXJrdXAsIElubGluZUtleWJvYXJkQnV0dG9uCmltcG9ydCByZXF1ZXN0cwppbXBvcnQgcmFuZG9tCmltcG9ydCBqc29uCmltcG9ydCBTaWduZXJQeQppbXBvcnQgdGhyZWFkaW5nCmltcG9ydCBxdWV1ZQppbXBvcnQgcmUKaW1wb3J0IGNvbmN1cnJlbnQuZnV0dXJlcwppbXBvcnQgdGltZQoKQk9UX1RPS0VOID0gIjgyNjk1OTk5NTk6QUFHTGlVSi13UzdLbE9uMlEtT1MxeGx1c1FRV0VocDdBQjgiCgpib3QgPSB0ZWxlYm90LlRlbGVCb3QoQk9UX1RPS0VOKQpERVZFTE9QRVJfVVNFUk5BTUUgPSAiQEJZX1pldVN4IiAgCgoKdXNlcl9zdGF0ZXMgPSB7fQp1c2VyX3Nlc3Npb25zID0ge30KdXNlcl9hY3Rpb25zID0ge30KdXNlcl90aHJlYWRzID0ge30KZGV2aWNlX2lkID0gc3RyKHJhbmRvbS5yYW5kaW50KDEwKioxOCwgMTAqKjE5IC0gMSkpCnNheWlkID0gcmVxdWVzdHMuc2Vzc2lvbigpCgoKZGVmIG1haW5fbWVudSgpOgogICAgbWFya3VwID0gSW5saW5lS2V5Ym9hcmRNYXJrdXAocm93X3dpZHRoPTIpCiAgICBtYXJrdXAuYWRkKAogICAgICAgIElubGluZUtleWJvYXJkQnV0dG9uKCJWaWRlb2xhcsSxIEdpemxlIiwgY2FsbGJhY2tfZGF0YT0ibWFrZV9wcml2YXRlIiksCiAgICAgICAgSW5saW5lS2V5Ym9hcmRCdXR0b24oIkJlxJ9lbmlsZXJpIEthbGTEsXIiLCBjYWxsYmFja19kYXRhPSJ1bmxpa2UiKSwKICAgICAgICBJbmxpbmVLZXlib2FyZEJ1dHRvbigiVGFraXBsZXJpIEthbGTEsXIiLCBjYWxsYmFja19kYXRhPSJ1bmZvbGxvdyIpLAogICAgICAgIElubGluZUtleWJvYXJkQnV0dG9uKCJGYXZvcmkgVmlkZW9sYXLEsSBLYWxkxLFyIiwgY2FsbGJhY2tfZGF0YT0idW5jb2xsZWN0IiksCiAgICAgICAgSW5saW5lS2V5Ym9hcmRCdXR0b24oIlNlc3Npb24gw4dlayIsIHVybD0iaHR0cHM6Ly92dC50aWt0b2suY29tL1pTa1VhRlhRZi8iKSwKICAgICAgICBJbmxpbmVLZXlib2FyZEJ1dHRvbigiUHJvZ3JhbWPEsSIsIHVybD1mImh0dHBzOi8vdC5tZS97REVWRUxPUEVSX1VTRVJOQU1FWzE6XX0iKQogICAgKQogICAgcmV0dXJuIG1hcmt1cAoKQGJvdC5tZXNzYWdlX2hhbmRsZXIoY29tbWFuZHM9WydzdGFydCddKQpkZWYgc3RhcnQobWVzc2FnZSk6CiAgICBib3Quc2VuZF9tZXNzYWdlKAogICAgICAgIG1lc3NhZ2UuY2hhdC5pZCwKICAgICAgICAiLSBUaWtUb2sgSGl6bWV0bGVyIEJvdHVuYSBIb8WfZ2VsZGluaXpcbkzDvHRmZW4gYmlyIGhpem1ldCBzZcOnaW46IiwKICAgICAgICByZXBseV9tYXJrdXA9bWFpbl9tZW51KCkKICAgICkKCkBib3QuY2FsbGJhY2tfcXVlcnlfaGFuZGxlcihmdW5jPWxhbWJkYSBjYWxsOiBUcnVlKQpkZWYgY2FsbGJhY2tfcXVlcnkoY2FsbCk6CiAgICB1c2VyX2lkID0gY2FsbC5mcm9tX3VzZXIuaWQKICAgIGNoYXRfaWQgPSBjYWxsLm1lc3NhZ2UuY2hhdC5pZAoKICAgIGlmIGNhbGwuZGF0YSA9PSAibWFrZV9wcml2YXRlIjoKICAgICAgICBib3QuYW5zd2VyX2NhbGxiYWNrX3F1ZXJ5KGNhbGwuaWQpCiAgICAgICAgdXNlcl9hY3Rpb25zW3VzZXJfaWRdID0gIm1ha2VfcHJpdmF0ZSIKICAgICAgICBib3Quc2VuZF9tZXNzYWdlKGNoYXRfaWQsICJWaWRlb2xhcsSxbsSxesSxIGdpemxlbWVrIGnDp2luIGhlc2FixLFuxLF6xLFuIHNlc3Npb25pZCBiaWxnaXNpbmkgZ8O2bmRlcmluLiIpCiAgICAKICAgIGVsaWYgY2FsbC5kYXRhID09ICJ1bmxpa2UiOgogICAgICAgIGJvdC5hbnN3ZXJfY2FsbGJhY2tfcXVlcnkoY2FsbC5pZCkKICAgICAgICB1c2VyX2FjdGlvbnNbdXNlcl9pZF0gPSAidW5saWtlIgogICAgICAgIGJvdC5zZW5kX21lc3NhZ2UoY2hhdF9pZCwgIkJlxJ9lbmlsZXJpIGthbGTEsXJtYWsgacOnaW4gaGVzYWLEsW7EsXrEsW4gc2Vzc2lvbmlkIGJpbGdpc2luaSBnw7ZuZGVyaW4uIikKICAgIAogICAgZWxpZiBjYWxsLmRhdGEgPT0gInVuZm9sbG93IjoKICAgICAgICBib3QuYW5zd2VyX2NhbGxiYWNrX3F1ZXJ5KGNhbGwuaWQpCiAgICAgICAgdXNlcl9hY3Rpb25zW3VzZXJfaWRdID0gInVuZm9sbG93IgogICAgICAgIGJvdC5zZW5kX21lc3NhZ2UoY2hhdF9pZCwgIlRha2lwbGVyaSBrYWxkxLFybWFrIGnDp2luIGhlc2FixLFuxLF6xLFuIHNlc3Npb25pZCBiaWxnaXNpbmkgZ8O2bmRlcmluLiIpCiAgICAKICAgIGVsaWYgY2FsbC5kYXRhID09ICJ1bmNvbGxlY3QiOgogICAgICAgIGJvdC5hbnN3ZXJfY2FsbGJhY2tfcXVlcnkoY2FsbC5pZCkKICAgICAgICB1c2VyX2FjdGlvbnNbdXNlcl9pZF0gPSAidW5jb2xsZWN0IgogICAgICAgIGJvdC5zZW5kX21lc3NhZ2UoY2hhdF9pZCwgIkZhdm9yaSB2aWRlb2xhcsSxIGthbGTEsXJtYWsgacOnaW4gaGVzYWLEsW7EsXrEsW4gc2Vzc2lvbmlkIGJpbGdpc2luaSBnw7ZuZGVyaW4uIikKCgpAYm90Lm1lc3NhZ2VfaGFuZGxlcihmdW5jPWxhbWJkYSBtZXNzYWdlOiBUcnVlKQpkZWYgaGFuZGxlX21lc3NhZ2UobWVzc2FnZSk6CiAgICB1c2VyX2lkID0gbWVzc2FnZS5mcm9tX3VzZXIuaWQKICAgIGNoYXRfaWQgPSBtZXNzYWdlLmNoYXQuaWQKICAgIHNlc3Npb25faWQgPSBtZXNzYWdlLnRleHQuc3RyaXAoKQogICAgCiAgICBpZiBub3Qgc2Vzc2lvbl9pZDoKICAgICAgICBib3Quc2VuZF9tZXNzYWdlKGNoYXRfaWQsICJTZXNzaW9uIElEIGJvxZ8gb2xhbWF6LiIpCiAgICAgICAgcmV0dXJuCiAgICAKICAgIGFjdGlvbiA9IHVzZXJfYWN0aW9ucy5nZXQodXNlcl9pZCkKICAgIAogICAgaWYgYWN0aW9uID09ICJtYWtlX3ByaXZhdGUiOgogICAgICAgIGJvdC5zZW5kX21lc3NhZ2UoY2hhdF9pZCwgIkhlc2FwIHZlcmlsZXJpIGFsxLFuxLF5b3IgdmUgdmlkZW9sYXIgZ2l6bGVuaXlvci4uLiIpCiAgICAgICAgdGhyZWFkaW5nLlRocmVhZCh0YXJnZXQ9cnVuX3ByaXZhdGVyLCBhcmdzPShzZXNzaW9uX2lkLCBjaGF0X2lkKSkuc3RhcnQoKQogICAgCiAgICBlbGlmIGFjdGlvbiA9PSAidW5saWtlIjoKICAgICAgICB1c2VyX3N0YXRlc1tjaGF0X2lkXSA9IHsKICAgICAgICAgICAgJ3N0YXRlJzogJ3J1bm5pbmcnLAogICAgICAgICAgICAnY29va2llcyc6IHsKICAgICAgICAgICAgICAgICdzaWRfdHQnOiBzZXNzaW9uX2lkLAogICAgICAgICAgICAgICAgJ3Nlc3Npb25pZCc6IHNlc3Npb25faWQsCiAgICAgICAgICAgICAgICAnc2Vzc2lvbmlkX3NzJzogc2Vzc2lvbl9pZCwKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBtc2cgPSBib3Quc2VuZF9tZXNzYWdlKGNoYXRfaWQsICJTZXNzaW9uIGFsxLFuZMSxLCBpxZ9sZW0gYmHFn2xhdMSxbMSxeW9yLi4uIikKICAgICAgICB0aHJlYWRpbmcuVGhyZWFkKHRhcmdldD1ydW5fdW5saWtlX3Byb2Nlc3MsIGFyZ3M9KGNoYXRfaWQsIG1zZykpLnN0YXJ0KCkKICAgIAogICAgZWxpZiBhY3Rpb24gPT0gInVuZm9sbG93IjoKICAgICAgICBzZW50ID0gYm90LnNlbmRfbWVzc2FnZShjaGF0X2lkLCAiVGFraXBsZXIga2FsZMSxcsSxbMSxeW9yLCBsw7x0ZmVuIGJla2xleWluLi4uIikKICAgICAgICB0aHJlYWRpbmcuVGhyZWFkKHRhcmdldD1zdGFydF91bmZvbGxvd19wcm9jZXNzLCBhcmdzPShzZXNzaW9uX2lkLCBzZW50KSkuc3RhcnQoKQogICAgCiAgICBlbGlmIGFjdGlvbiA9PSAidW5jb2xsZWN0IjoKICAgICAgICBpZiBjaGF0X2lkIGluIHVzZXJfc2Vzc2lvbnM6CiAgICAgICAgICAgIGJvdC5zZW5kX21lc3NhZ2UoY2hhdF9pZCwgIsSwxZ9sZW0gemF0ZW4gw6dhbMSxxZ/EsXlvciwgbMO8dGZlbiBiaXRtZXNpbmkgYmVrbGV5aW4gdmV5YSBib3R1IHllbmlkZW4gYmHFn2xhdMSxbi4iKQogICAgICAgICAgICByZXR1cm4KICAgICAgICAKICAgICAgICB1c2VyX3Nlc3Npb25zW2NoYXRfaWRdID0gewogICAgICAgICAgICAic2Vzc2lvbmlkIjogc2Vzc2lvbl9pZCwKICAgICAgICAgICAgImNvdW50ZXIiOiBbMF0sCiAgICAgICAgICAgICJsb2NrIjogdGhyZWFkaW5nLkxvY2soKSwKICAgICAgICAgICAgInVzZWRfYXdlbWVfaWRzIjogc2V0KCkKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgc2VudF9tc2cgPSBib3Quc2VuZF9tZXNzYWdlKGNoYXRfaWQsICLEsMWfbGVtbGVyIHnDvHLDvHTDvGzDvHlvci4uLiIpCiAgICAgICAgdXNlcl9zZXNzaW9uc1tjaGF0X2lkXVsibXNnX2lkIl0gPSBzZW50X21zZy5tZXNzYWdlX2lkCiAgICAgICAgCiAgICAgICAgdGhyZWFkcyA9IFtdCiAgICAgICAgZm9yIF8gaW4gcmFuZ2UoMTApOgogICAgICAgICAgICB0ID0gdGhyZWFkaW5nLlRocmVhZCgKICAgICAgICAgICAgICAgIHRhcmdldD13b3JrZXJfdGhyZWFkLAogICAgICAgICAgICAgICAgYXJncz0oCiAgICAgICAgICAgICAgICAgICAgY2hhdF9pZCwKICAgICAgICAgICAgICAgICAgICBzZXNzaW9uX2lkLAogICAgICAgICAgICAgICAgICAgIHVzZXJfc2Vzc2lvbnNbY2hhdF9pZF1bImNvdW50ZXIiXSwKICAgICAgICAgICAgICAgICAgICB1c2VyX3Nlc3Npb25zW2NoYXRfaWRdWyJ1c2VkX2F3ZW1lX2lkcyJdLAogICAgICAgICAgICAgICAgICAgIHVzZXJfc2Vzc2lvbnNbY2hhdF9pZF1bImxvY2siXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIGRhZW1vbj1UcnVlCiAgICAgICAgICAgICkKICAgICAgICAgICAgdC5zdGFydCgpCiAgICAgICAgICAgIHRocmVhZHMuYXBwZW5kKHQpCiAgICAgICAgCiAgICAgICAgdXNlcl90aHJlYWRzW2NoYXRfaWRdID0gdGhyZWFkcwogICAgCiAgICBlbHNlOgogICAgICAgIGJvdC5zZW5kX21lc3NhZ2UoY2hhdF9pZCwgImhpw6diaXIgacWfbGVtIHNlw6dpbG1lZGksbMO8dGZlbiBiaXIgacWfbGVtIHNlw6dpbiIpCgoKZGVmIGdldF9pbmZvX3VybChjb29raWVzX2NvbW1vbik6CiAgICBoZWFkZXJzID0gewogICAgICAgICd1c2VyLWFnZW50JzogJ01vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA2LjA7IE5leHVzIDUgQnVpbGQvTVJBNThOKSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMTM4LjAuMC4wIE1vYmlsZSBTYWZhcmkvNTM3LjM2JywKICAgIH0KCiAgICBjb29raWVzMiA9IGNvb2tpZXNfY29tbW9uLmNvcHkoKQogICAgY29va2llczJbJ190dHAnXSA9ICcydmdpcmpPbnVTclNPbnByYktUNGY2SDBoNFUnCiAgICBjb29raWVzMlsndHRfY2hhaW5fdG9rZW4nXSA9ICdhSSt0eVdSQkgvaHhEd0syalFxVkZnPT0nCgogICAgdXJsID0gImh0dHBzOi8vd3d3LnRpa3Rvay5jb20vcGFzc3BvcnQvd2ViL2FjY291bnQvaW5mby8/V2ViSWRMYXN0VGltZT0xNzQ1OTQ4NDE4JmFpZD0xNDU5JmFwcF9sYW5ndWFnZT1hciZhcHBfbmFtZT10aWt0b2tfd2ViJmRldmljZV9wbGF0Zm9ybT13ZWJfbW9iaWxlJnJlZmVyZXI9aHR0cHMlM0ElMkYlMkZ3d3cudGlrdG9rLmNvbSUyRiZyZWdpb249SVEiCiAgICAKICAgIHJlc3BvbnNlID0gcmVxdWVzdHMuZ2V0KHVybCwgaGVhZGVycz1oZWFkZXJzLCBjb29raWVzPWNvb2tpZXMyKQogICAgdHJ5OgogICAgICAgIGRhdGEgPSByZXNwb25zZS5qc29uKCkKICAgICAgICB1c2VyX2lkID0gZGF0YVsiZGF0YSJdWyJ1c2VyX2lkIl0KICAgICAgICBzZWNfdXNlcl9pZCA9IGRhdGFbImRhdGEiXVsic2VjX3VzZXJfaWQiXQogICAgICAgIHJldHVybiBzZWNfdXNlcl9pZAogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgIHByaW50KCJWZXJpIMOnZWttZSBzxLFyYXPEsW5kYSBoYXRhIG9sdcWfdHU6IiwgZSkKICAgICAgICByZXR1cm4gTm9uZQoKZGVmIGdldF9mYXZvcml0ZXNfcmVzKHNlY191c2VyX2lkLCBjb29raWVzX2NvbW1vbik6CiAgICBpZiBub3Qgc2VjX3VzZXJfaWQ6CiAgICAgICAgcHJpbnQoIsSwxZ9sZW0gc2VjX3VzZXJfaWQgb2xtYWRhbiB0YW1hbWxhbmFtYXoiKQogICAgICAgIHJldHVybiBOb25lCgogICAgdXJsID0gZiJodHRwczovL2FwaTIyLW5vcm1hbC1jLWFsaXNnLnRpa3Rva3YuY29tL2F3ZW1lL3YxL2F3ZW1lL2Zhdm9yaXRlLz9pbnZhbGlkX2l0ZW1fY291bnQ9MCZpc19oaWRpbmdfaW52YWxpZF9pdGVtPTAmbWF4X2N1cnNvcj0wJnNlY191c2VyX2lkPXtzZWNfdXNlcl9pZH0mY291bnQ9MjAmZGV2aWNlX3BsYXRmb3JtPWFuZHJvaWQmb3M9YW5kcm9pZCZzc21peD1hJl9ydGlja2V0PTE3NTMxMDkxMjE5NTcmY2RpZD05NWE2MzBkYS02MjlhLTQ1NGYtODY2OS0zZGU5M2Y3Njg0ZGYmY2hhbm5lbD1nb29nbGVwbGF5JmFpZD0xMjMzJmFwcF9uYW1lPW11c2ljYWxfbHkmdmVyc2lvbl9jb2RlPTM3MDEwNCZ2ZXJzaW9uX25hbWU9MzcuMS40Jm1hbmlmZXN0X3ZlcnNpb25fY29kZT0yMDIzNzAxMDQwJnVwZGF0ZV92ZXJzaW9uX2NvZGU9MjAyMzcwMTA0MCZhYl92ZXJzaW9uPTM3LjEuNCZyZXNvbHV0aW9uPTkwMCoxNjAwJmRwaT0zMDAmZGV2aWNlX3R5cGU9QVNVU19JMDAzREQmZGV2aWNlX2JyYW5kPUFzdXMmbGFuZ3VhZ2U9YXImb3NfYXBpPTI4Jm9zX3ZlcnNpb249OSZhYz13aWZpJmlzX3BhZD0wJmN1cnJlbnRfcmVnaW9uPUlRJmFwcF90eXBlPW5vcm1hbCZzeXNfcmVnaW9uPUlRJmxhc3RfaW5zdGFsbF90aW1lPTE3NTI5NzQ1ODUmbWNjX21uYz00MTg0MCZ0aW1lem9uZV9uYW1lPUFzaWElMkZTaGFuZ2hhaSZyZXNpZGVuY2U9SVEmYXBwX2xhbmd1YWdlPWFyJmNhcnJpZXJfcmVnaW9uPUlRJnRpbWV6b25lX29mZnNldD0yODgwMCZob3N0X2FiaT1hcm02NC12OGEmbG9jYWxlPWFyJmFjMj13aWZpJnVvbz0wJm9wX3JlZ2lvbj1JUSZidWlsZF9udW1iZXI9MzcuMS40JnJlZ2lvbj1JUSZ0cz0xNzUzMDk4MzIxJmlpZD03NTI4ODc1MTQ5NDU5NzM2MzI3JmRldmljZV9pZD03NTI4ODc0ODM3NzYwMDY3MDkwJm9wZW51ZGlkPTUyZWNhMzI5NzllOTI2MzMiCiAgICAKICAgIHNheWlkLmNvb2tpZXMudXBkYXRlKGNvb2tpZXNfY29tbW9uKQogICAgcGFyYW1zID0geyJkZXZpY2VfaWQiOiBkZXZpY2VfaWQsICJvc192ZXJzaW9uIjogIjkiLCAiYXBwX3ZlcnNpb24iOiAiMzcuOC41In0KICAgIEggPSBTaWduZXJQeS5zaWduKHBhcmFtcz1wYXJhbXMsIGNvb2tpZT1jb29raWVzX2NvbW1vbikKCiAgICBoZWFkZXJzID0gewogICAgICAgICdVc2VyLUFnZW50JzogImNvbS56aGlsaWFvYXBwLm11c2ljYWxseS8yMDIzNzAxMDQwIChMaW51eDsgVTsgQW5kcm9pZCA5OyBhcjsgQVNVU19JMDAzREQ7IEJ1aWxkL1BJO3R0LW9rLzMuMTIuMTMuNC10aWt0b2spIiwKICAgICAgICAneC1zcy1yZXEtdGlja2V0JzogSFsneC1zcy1yZXEtdGlja2V0J10sCiAgICAgICAgJ3gtbGFkb24nOiBIWyd4LWxhZG9uJ10sCiAgICAgICAgJ3gta2hyb25vcyc6IEhbJ3gta2hyb25vcyddLAogICAgICAgICd4LWFyZ3VzJzogSFsneC1hcmd1cyddLAogICAgICAgICd4LWdvcmdvbic6IEhbJ3gtZ29yZ29uJ10sCiAgICB9CgogICAgdHJ5OgogICAgICAgIHJlcyA9IHNheWlkLmdldCh1cmwsIGhlYWRlcnM9aGVhZGVycywgY29va2llcz1jb29raWVzX2NvbW1vbikgIAogICAgICAgIGRhdGEgPSByZXMuanNvbigpCiAgICAgICAgYXdlbWVfaWRzID0gW2F3ZW1lWydhd2VtZV9pZCddIGZvciBhd2VtZSBpbiBkYXRhLmdldCgnYXdlbWVfbGlzdCcsIFtdKV0KICAgICAgICB1bmlxdWVfaWRzID0gbGlzdChzZXQoYXdlbWVfaWRzKSkKICAgICAgICByZXR1cm4gdW5pcXVlX2lkcwogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgIHByaW50KGYiRmF2b3JpbGVyIGFsxLFuxLFya2VuIGhhdGEgb2x1xZ90dToge2V9IikKICAgICAgICByZXR1cm4gTm9uZQoKZGVmIGRpZ2dfYXdlbWVfcmVzMShhd2VtZSwgY29va2llc19jb21tb24pOgogICAgaWYgbm90IGF3ZW1lOgogICAgICAgIHJldHVybiBGYWxzZSwgIkF3ZW1lIElEIGJ1bHVuYW1hZMSxLiIKICAgICAgICAKICAgIHVybDEgPSBmImh0dHBzOi8vYXBpMjItbm9ybWFsLWMtYWxpc2cudGlrdG9rdi5jb20vYXdlbWUvdjEvY29tbWl0L2l0ZW0vZGlnZy8/YXdlbWVfaWQ9e2F3ZW1lfSZlbnRlcl9mcm9tPXBlcnNvbmFsX2hvbWVwYWdlJmZyaWVuZHNfdXB2b3RlPWZhbHNlJnR5cGU9MCZjaGFubmVsX2lkPTMmaWlkPTc1Mjg4NzUxNDk0NTk3MzYzMjcmZGV2aWNlX2lkPTc1Mjg4NzQ4Mzc3NjAwNjcwOTAmYWM9V0lGSSZjaGFubmVsPWdvb2dsZXBsYXkmYWlkPTEyMzMmYXBwX25hbWU9bXVzaWNhbF9seSZ2ZXJzaW9uX2NvZGU9MzcwMTA0JnZlcnNpb25fbmFtZT0zNy4xLjQmZGV2aWNlX3BsYXRmb3JtPWFuZHJvaWQmb3M9YW5kcm9pZCZhYl92ZXJzaW9uPTM3LjEuNCZzc21peD1hJmRldmljZV90eXBlPUFTVVNfSTAwM0REJmRldmljZV9icmFuZD1Bc3VzJmxhbmd1YWdlPWFyJm9zX2FwaT0yOCZvc192ZXJzaW9uPTkmb3BlbnVkaWQ9NTJlY2EzMjk3OWU5MjYzMyZtYW5pZmVzdF92ZXJzaW9uX2NvZGU9MjAyMzcwMTA0MCZyZXNvbHV0aW9uPTE2MDAqOTAwJmRwaT0zMDAmdXBkYXRlX3ZlcnNpb25fY29kZT0yMDIzNzAxMDQwJl9ydGlja2V0PTE3NTMxMTM1NjA1NDkmaXNfcGFkPTAmYXBwX3R5cGU9bm9ybWFsJnN5c19yZWdpb249SVEmbGFzdF9pbnN0YWxsX3RpbWU9MTc1MzExMzI3MyZtY2NfbW5jPTQxODQwJnRpbWV6b25lX25hbWU9QXNpYSUyRlNoYW5naGFpJmFwcF9sYW5ndWFnZT1hciZjYXJyaWVyX3JlZ2lvbj1JUSZhYzI9d2lmaSZ1b289MCZvcF9yZWdpb249SVEmdGltZXpvbmVfb2Zmc2V0PTI4ODAwJmJ1aWxkX251bWJlcj0zNy4xLjQmaG9zdF9hYmk9YXJtNjQtdjhhJmxvY2FsZT1hciZyZWdpb249SVEmdHM9MTc1MzEwMjc2MCZjZGlkPTFlNWMxYWU5LTVjZjgtNDg3OS05NWYwLTVlZGRlMjM1MmI1NyIKCiAgICBzYXlpZC5jb29raWVzLnVwZGF0ZShjb29raWVzX2NvbW1vbikKICAgIHBhcmFtczIgPSB7ImRldmljZV9pZCI6IGRldmljZV9pZCwgIm9zX3ZlcnNpb24iOiAiOSIsICJhcHBfdmVyc2lvbiI6ICIzNy44LjUifQogICAgSDEgPSBTaWduZXJQeS5zaWduKHBhcmFtcz1wYXJhbXMyLCBjb29raWU9Y29va2llc19jb21tb24pCgogICAgaGVhZGVyczIgPSB7CiAgICAgICAgJ1VzZXItQWdlbnQnOiAiY29tLnpoaWxpYW9hcHAubXVzaWNhbGx5LzIwMjM3MDEwNDAuLi4iLAogICAgICAgICd4LXNzLXJlcS10aWNrZXQnOiBIMVsneC1zcy1yZXEtdGlja2V0J10sCiAgICAgICAgJ3gtbGFkb24nOiBIMVsneC1sYWRvbiddLAogICAgICAgICd4LWtocm9ub3MnOiBIMVsneC1raHJvbm9zJ10sCiAgICAgICAgJ3gtYXJndXMnOiBIMVsneC1hcmd1cyddLAogICAgICAgICd4LWdvcmdvbic6IEgxWyd4LWdvcmdvbiddLAogICAgfQoKICAgIHRyeToKICAgICAgICByZXMxID0gc2F5aWQuZ2V0KHVybDEsIGhlYWRlcnM9aGVhZGVyczIsIGNvb2tpZXM9Y29va2llc19jb21tb24pCiAgICAgICAgcmVzX2pzb24gPSByZXMxLmpzb24oKQogICAgICAgIHN1Y2Nlc3MgPSByZXNfanNvbi5nZXQoInN0YXR1c19jb2RlIikgPT0gMCBhbmQgcmVzX2pzb24uZ2V0KCJpc19kaWdnIikgPT0gMQogICAgICAgIHJldHVybiBzdWNjZXNzLCBqc29uLmR1bXBzKHJlc19qc29uLCBpbmRlbnQ9MiwgZW5zdXJlX2FzY2lpPUZhbHNlKQogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgIHJldHVybiBGYWxzZSwgZiLEsMWfbGVtIHPEsXJhc8SxbmRhIGhhdGEgb2x1xZ90dToge2V9IgoKZGVmIHJ1bl91bmxpa2VfcHJvY2VzcyhjaGF0X2lkLCBtc2cpOgogICAgdXNlcl9kYXRhID0gdXNlcl9zdGF0ZXMuZ2V0KGNoYXRfaWQpCiAgICBpZiBub3QgdXNlcl9kYXRhIG9yICdjb29raWVzJyBub3QgaW4gdXNlcl9kYXRhOgogICAgICAgIGJvdC5lZGl0X21lc3NhZ2VfdGV4dCgiU2Vzc2lvbiBidWx1bmFtYWTEsS4iLCBjaGF0X2lkLCBtc2cubWVzc2FnZV9pZCkKICAgICAgICByZXR1cm4KCiAgICBjb29raWVzX2NvbW1vbiA9IHVzZXJfZGF0YVsnY29va2llcyddCiAgICBzZWNfdXNlcl9pZCA9IGdldF9pbmZvX3VybChjb29raWVzX2NvbW1vbikKICAgIGlmIG5vdCBzZWNfdXNlcl9pZDoKICAgICAgICBib3QuZWRpdF9tZXNzYWdlX3RleHQoIlNlY191c2VyX2lkIGFsxLFuYW1hZMSxLiIsIGNoYXRfaWQsIG1zZy5tZXNzYWdlX2lkKQogICAgICAgIHJldHVybgoKICAgIGxpa2VfY291bnQgPSBbMF0gCiAgICBsaWtlX2NvdW50X2xvY2sgPSB0aHJlYWRpbmcuTG9jaygpCgogICAgYm90LmVkaXRfbWVzc2FnZV90ZXh0KGYiQmXEn2VuaWxlcmkga2FsZMSxcm1hIGnFn2xlbWkgYmHFn2xhdMSxbGTEsVxuS2FsZMSxcsSxbGFuIGJlxJ9lbmkgc2F5xLFzxLE6IHtsaWtlX2NvdW50WzBdfSIsIGNoYXRfaWQsIG1zZy5tZXNzYWdlX2lkKQoKICAgIHdoaWxlIFRydWU6CiAgICAgICAgYXdlbWVfaWRzID0gZ2V0X2Zhdm9yaXRlc19yZXMoc2VjX3VzZXJfaWQsIGNvb2tpZXNfY29tbW9uKQogICAgICAgIGlmIG5vdCBhd2VtZV9pZHM6CiAgICAgICAgICAgIGJyZWFrCgogICAgICAgIGF3ZW1lX3F1ZXVlID0gcXVldWUuUXVldWUoKQogICAgICAgIGZvciBhd2VtZSBpbiBhd2VtZV9pZHM6CiAgICAgICAgICAgIGF3ZW1lX3F1ZXVlLnB1dChhd2VtZSkKCiAgICAgICAgdGhyZWFkcyA9IFtdCiAgICAgICAgZm9yIF8gaW4gcmFuZ2UoMjApOiAgCiAgICAgICAgICAgIHQgPSB0aHJlYWRpbmcuVGhyZWFkKHRhcmdldD13b3JrZXIsIGFyZ3M9KGF3ZW1lX3F1ZXVlLCBjb29raWVzX2NvbW1vbiwgY2hhdF9pZCwgbXNnLCBsaWtlX2NvdW50X2xvY2ssIGxpa2VfY291bnQpKQogICAgICAgICAgICB0LnN0YXJ0KCkKICAgICAgICAgICAgdGhyZWFkcy5hcHBlbmQodCkKCiAgICAgICAgZm9yIHQgaW4gdGhyZWFkczoKICAgICAgICAgICAgdC5qb2luKCkKCiAgICBib3QuZWRpdF9tZXNzYWdlX3RleHQoZiLEsMWfbGVtIGJhxZ9hcsSxeWxhIHRhbWFtbGFuZMSxLlxuS2FsZMSxcsSxbGFuIGJlxJ9lbmkgc2F5xLFzxLE6IHtsaWtlX2NvdW50WzBdfSIsIGNoYXRfaWQsIG1zZy5tZXNzYWdlX2lkKQoKZGVmIHdvcmtlcihhd2VtZV9xdWV1ZSwgY29va2llc19jb21tb24sIGNoYXRfaWQsIG1zZywgbGlrZV9jb3VudF9sb2NrLCBsaWtlX2NvdW50KToKICAgIHdoaWxlIFRydWU6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBhd2VtZSA9IGF3ZW1lX3F1ZXVlLmdldF9ub3dhaXQoKQogICAgICAgIGV4Y2VwdCBxdWV1ZS5FbXB0eToKICAgICAgICAgICAgYnJlYWsKCiAgICAgICAgc3VjY2VzcywgXyA9IGRpZ2dfYXdlbWVfcmVzMShhd2VtZSwgY29va2llc19jb21tb24pCiAgICAgICAgaWYgc3VjY2VzczoKICAgICAgICAgICAgd2l0aCBsaWtlX2NvdW50X2xvY2s6CiAgICAgICAgICAgICAgICBsaWtlX2NvdW50WzBdICs9IDEKICAgIHRyeToKICAgIAlib3QuZWRpdF9tZXNzYWdlX3RleHQoZiJCZcSfZW5pbGVyaSBrYWxkxLFybWEgacWfbGVtaSBiYcWfbGF0xLFsZMSxXG5LYWxkxLFyxLFsYW4gYmXEn2VuaSBzYXnEsXPEsToge2xpa2VfY291bnRbMF19IiwgY2hhdF9pZCwgbXNnLm1lc3NhZ2VfaWQpCiAgICBleGNlcHQ6CiAgICAJcGFzcwogICAgZmluYWxseToKICAgIAlhd2VtZV9xdWV1ZS50YXNrX2RvbmUoKQoKCmRlZiBnZW5lcmF0ZV9zaWduZWRfaGVhZGVycyhkZXZpY2VfaWQsIGNvb2tpZXMpOgogICAgcGFyYW1zID0gewogICAgICAgICJkZXZpY2VfaWQiOiBkZXZpY2VfaWQsCiAgICAgICAgIm9zX3ZlcnNpb24iOiAiOSIsCiAgICAgICAgImFwcF92ZXJzaW9uIjogIjM3LjguNSIKICAgIH0KICAgIHNpZ25lZCA9IFNpZ25lclB5LnNpZ24ocGFyYW1zPXBhcmFtcywgY29va2llPWNvb2tpZXMpCiAgICByZXR1cm4gewogICAgICAgICdVc2VyLUFnZW50JzogJ2NvbS56aGlsaWFvYXBwLm11c2ljYWxseS8yMDIzNzAxMDQwIChMaW51eDsgVTsgQW5kcm9pZCA5OyBhcjsgQVNVU19JMDAzREQ7IEJ1aWxkL1BJO3R0LW9rLzMuMTIuMTMuNC10aWt0b2spJywKICAgICAgICAneC1zcy1yZXEtdGlja2V0Jzogc2lnbmVkWyd4LXNzLXJlcS10aWNrZXQnXSwKICAgICAgICAneC1sYWRvbic6IHNpZ25lZFsneC1sYWRvbiddLAogICAgICAgICd4LWtocm9ub3MnOiBzaWduZWRbJ3gta2hyb25vcyddLAogICAgICAgICd4LWFyZ3VzJzogc2lnbmVkWyd4LWFyZ3VzJ10sCiAgICAgICAgJ3gtZ29yZ29uJzogc2lnbmVkWyd4LWdvcmdvbiddLAogICAgfQoKZGVmIGdldF9hY2NvdW50X2luZm8oY29va2llcyk6CiAgICB1cmwgPSAiaHR0cHM6Ly93d3cudGlrdG9rLmNvbS9wYXNzcG9ydC93ZWIvYWNjb3VudC9pbmZvLz9XZWJJZExhc3RUaW1lPTE3NDU5NDg0MTgmYWlkPTE0NTkmYXBwX2xhbmd1YWdlPWFyJmFwcF9uYW1lPXRpa3Rva193ZWImZGV2aWNlX3BsYXRmb3JtPXdlYl9tb2JpbGUmcmVmZXJlcj1odHRwcyUzQSUyRiUyRnd3dy50aWt0b2suY29tJTJGJnJlZ2lvbj1JUSIKICAgIGhlYWRlcnMgPSB7J3VzZXItYWdlbnQnOiAnTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDYuMDsgTmV4dXMgNSBCdWlsZC9NUkE1OE4pIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS8xMzguMC4wLjAgTW9iaWxlIFNhZmFyaS81MzcuMzYnfQogICAgcmVzID0gcmVxdWVzdHMuZ2V0KHVybCwgaGVhZGVycz1oZWFkZXJzLCBjb29raWVzPWNvb2tpZXMsIHRpbWVvdXQ9MTApCiAgICBkYXRhID0gcmVzLmpzb24oKVsiZGF0YSJdCiAgICByZXR1cm4gZGF0YVsidXNlcl9pZCJdLCBkYXRhWyJzZWNfdXNlcl9pZCJdCgpkZWYgZ2V0X2ZvbGxvd2luZyh1c2VyX2lkLCBzZWNfdXNlcl9pZCwgaGVhZGVycywgc2Vzc2lvbik6CiAgICB1cmwgPSBmImh0dHBzOi8vYXBpMjItbm9ybWFsLWMtYWxpc2cudGlrdG9rdi5jb20vYXdlbWUvdjEvdXNlci9mb2xsb3dpbmcvbGlzdC8/dXNlcl9pZD17dXNlcl9pZH0mc2VjX3VzZXJfaWQ9e3NlY191c2VyX2lkfSZtYXhfdGltZT0wJmNvdW50PTQwJm9mZnNldD0wJnNvdXJjZV90eXBlPTEmYWRkcmVzc19ib29rX2FjY2Vzcz0xJnBhZ2VfdG9rZW4mbGl2ZV9zb3J0X2J5PTEmZGV2aWNlX3BsYXRmb3JtPWFuZHJvaWQmb3M9YW5kcm9pZCZzc21peD1hJl9ydGlja2V0PTE3NTMxODQ4NzAwNDEmY2RpZD0xZTVjMWFlOS01Y2Y4LTQ4NzktOTVmMC01ZWRkZTIzNTJiNTcmY2hhbm5lbD1nb29nbGVwbGF5JmFpZD0xMjMzJmFwcF9uYW1lPW11c2ljYWxfbHkmdmVyc2lvbl9jb2RlPTM3MDEwNCZ2ZXJzaW9uX25hbWU9MzcuMS40Jm1hbmlmZXN0X3ZlcnNpb25fY29kZT0yMDIzNzAxMDQwJnVwZGF0ZV92ZXJzaW9uX2NvZGU9MjAyMzcwMTA0MCZhYl92ZXJzaW9uPTM3LjEuNCZyZXNvbHV0aW9uPTkwMCoxNjAwJmRwaT0zMDAmZGV2aWNlX3R5cGU9QVNVU19JMDAzREQmZGV2aWNlX2JyYW5kPUFzdXMmbGFuZ3VhZ2U9YXImb3NfYXBpPTI4Jm9zX3ZlcnNpb249OSZhYz13aWZpJmlzX3BhZD0wJmN1cnJlbnRfcmVnaW9uPUlRJmFwcF90eXBlPW5vcm1hbCZzeXNfcmVnaW9uPUlRJmxhc3RfaW5zdGFsbF90aW1lPTE3NTMxMTMyNzMmbWNjX21uYz00MTg0MCZ0aW1lem9uZV9uYW1lPUFzaWElMkZTaGFuZ2hhaSZyZXNpZGVuY2U9SVEmYXBwX2xhbmd1YWdlPWFyJmNhcnJpZXJfcmVnaW9uPUlRJnRpbWV6b25lX29mZnNldD0yODgwMCZob3N0X2FiaT1hcm02NC12OGEmbG9jYWxlPWFyJmFjMj13aWZpJnVvbz0wJm9wX3JlZ2lvbj1JUSZidWlsZF9udW1iZXI9MzcuMS40JnJlZ2lvbj1JUSZ0cz0xNzUzMTc0MDY5JmlpZD03NTI4ODc1MTQ5NDU5NzM2MzI3JmRldmljZV9pZD03NTI4ODc0ODM3NzYwMDY3MDkwJm9wZW51ZGlkPTUyZWNhMzI5NzllOTI2MzMiCiAgICByZXNwb25zZSA9IHNlc3Npb24uZ2V0KHVybCwgaGVhZGVycz1oZWFkZXJzKQogICAgcmV0dXJuIHJlLmZpbmRhbGwocicic2VjX3VpZCI6IiguKj8pIi4qPyJ1aWQiOiIoLio/KSInLCByZXNwb25zZS50ZXh0KQoKZGVmIHVuZm9sbG93X3VzZXIodWlkLCBzZWNfdWlkLCBoZWFkZXJzLCBjb29raWVzKToKICAgIHVybCA9IGYiaHR0cHM6Ly9hcGkyMi1ub3JtYWwtYy1hbGlzZy50aWt0b2t2LmNvbS9hd2VtZS92MS9jb21taXQvZm9sbG93L3VzZXIvP3VzZXJfaWQ9e3VpZH0mc2VjX3VzZXJfaWQ9e3NlY191aWR9JnR5cGU9MCZjaGFubmVsX2lkPS0xJmZyb209MCZmcm9tX3ByZT0zMSZhY3Rpb25fdGltZT0xNzUzMTg1NTA0NTEwJmlzX25ldHdvcmtfYXZhaWxhYmxlPXRydWUmZGV2aWNlX3BsYXRmb3JtPWFuZHJvaWQmb3M9YW5kcm9pZCZzc21peD1hJl9ydGlja2V0PTE3NTMxODU1MDQ1MTcmY2RpZD0xZTVjMWFlOS01Y2Y4LTQ4NzktOTVmMC01ZWRkZTIzNTJiNTcmY2hhbm5lbD1nb29nbGVwbGF5JmFpZD0xMjMzJmFwcF9uYW1lPW11c2ljYWxfbHkmdmVyc2lvbl9jb2RlPTM3MDEwNCZ2ZXJzaW9uX25hbWU9MzcuMS40Jm1hbmlmZXN0X3ZlcnNpb25fY29kZT0yMDIzNzAxMDQwJnVwZGF0ZV92ZXJzaW9uX2NvZGU9MjAyMzcwMTA0MCZhYl92ZXJzaW9uPTM3LjEuNCZyZXNvbHV0aW9uPTkwMCoxNjAwJmRwaT0zMDAmZGV2aWNlX3R5cGU9QVNVU19JMDAzREQmZGV2aWNlX2JyYW5kPUFzdXMmbGFuZ3VhZ2U9YXImb3NfYXBpPTI4Jm9zX3ZlcnNpb249OSZhYz13aWZpJmlzX3BhZD0wJmN1cnJlbnRfcmVnaW9uPUlRJmFwcF90eXBlPW5vcm1hbCZzeXNfcmVnaW9uPUlRJmxhc3RfaW5zdGFsbF90aW1lPTE3NTMxMTMyNzMmbWNjX21uYz00MTg0MCZ0aW1lem9uZV9uYW1lPUFzaWElMkZTaGFuZ2hhaSZyZXNpZGVuY2U9SVEmYXBwX2xhbmd1YWdlPWFyJmNhcnJpZXJfcmVnaW9uPUlRJnRpbWV6b25lX29mZnNldD0yODgwMCZob3N0X2FiaT1hcm02NC12OGEmbG9jYWxlPWFyJmFjMj13aWZpJnVvbz0wJm9wX3JlZ2lvbj1JUSZidWlsZF9udW1iZXI9MzcuMS40JnJlZ2lvbj1JUSZ0cz0xNzUzMTc0NzA0JmlpZD03NTI4ODc1MTQ5NDU5NzM2MzI3JmRldmljZV9pZD03NTI4ODc0ODM3NzYwMDY3MDkwJm9wZW51ZGlkPTUyZWNhMzI5NzllOTI2MzMiCiAgICB0cnk6CiAgICAgICAgcmVxdWVzdHMuZ2V0KHVybCwgaGVhZGVycz1oZWFkZXJzLCBjb29raWVzPWNvb2tpZXMsIHRpbWVvdXQ9MTApCiAgICAgICAgcmV0dXJuIFRydWUKICAgIGV4Y2VwdDoKICAgICAgICByZXR1cm4gRmFsc2UKCmRlZiBzdGFydF91bmZvbGxvd19wcm9jZXNzKHNlc3Npb25faWQsIG1lc3NhZ2UpOgogICAgZGV2aWNlX2lkID0gc3RyKHJhbmRvbS5yYW5kaW50KDEwKioxOCwgMTAqKjE5IC0gMSkpCiAgICBjb29raWVzID0gewogICAgICAgICdzaWRfdHQnOiBzZXNzaW9uX2lkLAogICAgICAgICdzZXNzaW9uaWQnOiBzZXNzaW9uX2lkLAogICAgICAgICdzZXNzaW9uaWRfc3MnOiBzZXNzaW9uX2lkLAogICAgfQogICAgc2Vzc2lvbiA9IHJlcXVlc3RzLlNlc3Npb24oKQogICAgc2Vzc2lvbi5jb29raWVzLnVwZGF0ZShjb29raWVzKQoKICAgIHRyeToKICAgICAgICB1c2VyX2lkLCBzZWNfdXNlcl9pZCA9IGdldF9hY2NvdW50X2luZm8oY29va2llcykKICAgIGV4Y2VwdDoKICAgICAgICBib3QuZWRpdF9tZXNzYWdlX3RleHQoIkhlc2FwIHZlcmlsZXJpIGFsxLFuYW1hZMSxLCBsw7x0ZmVuIHNlc3Npb25pZCBiaWxnaXNpbmkga29udHJvbCBlZGluIiwgbWVzc2FnZS5jaGF0LmlkLCBtZXNzYWdlLm1lc3NhZ2VfaWQpCiAgICAgICAgcmV0dXJuCgogICAgaGVhZGVycyA9IGdlbmVyYXRlX3NpZ25lZF9oZWFkZXJzKGRldmljZV9pZCwgY29va2llcykKICAgIGNvdW50ID0gMAogICAgd2hpbGUgVHJ1ZToKICAgICAgICBtYXRjaGVzID0gZ2V0X2ZvbGxvd2luZyh1c2VyX2lkLCBzZWNfdXNlcl9pZCwgaGVhZGVycywgc2Vzc2lvbikKICAgICAgICBpZiBub3QgbWF0Y2hlczoKICAgICAgICAgICAgYm90LmVkaXRfbWVzc2FnZV90ZXh0KGYie2NvdW50fSBoZXNhYsSxbiB0YWtpYmkgYmHFn2FyxLF5bGEga2FsZMSxcsSxbGTEsSIsIG1lc3NhZ2UuY2hhdC5pZCwgbWVzc2FnZS5tZXNzYWdlX2lkKQogICAgICAgICAgICBicmVhawoKICAgICAgICB3aXRoIGNvbmN1cnJlbnQuZnV0dXJlcy5UaHJlYWRQb29sRXhlY3V0b3IobWF4X3dvcmtlcnM9MzUpIGFzIGV4ZWN1dG9yOgogICAgICAgICAgICBmdXR1cmVzID0gW10KICAgICAgICAgICAgZm9yIHNlY191aWQsIHVpZCBpbiBtYXRjaGVzOgogICAgICAgICAgICAgICAgZnV0dXJlcy5hcHBlbmQoZXhlY3V0b3Iuc3VibWl0KHVuZm9sbG93X3VzZXIsIHVpZCwgc2VjX3VpZCwgaGVhZGVycywgY29va2llcykpCgogICAgICAgICAgICBmb3IgZnV0dXJlIGluIGNvbmN1cnJlbnQuZnV0dXJlcy5hc19jb21wbGV0ZWQoZnV0dXJlcyk6CiAgICAgICAgICAgICAgICBpZiBmdXR1cmUucmVzdWx0KCk6CiAgICAgICAgICAgICAgICAgICAgY291bnQgKz0gMQogICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgYm90LmVkaXRfbWVzc2FnZV90ZXh0KGYie2NvdW50fSBoZXNhYsSxbiB0YWtpYmkga2FsZMSxcsSxbGTEsSIsIG1lc3NhZ2UuY2hhdC5pZCwgbWVzc2FnZS5tZXNzYWdlX2lkKQogICAgICAgICAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgICAgICAgICAgcGFzcwoKCmRlZiBnZXRfYXdlbWVfaWQoc2Vzc2lvbiwgY29va2llKToKICAgIGRldmljZV9pZCA9IHN0cihyYW5kb20ucmFuZGludCgxMCoqMTgsIDEwKioxOSAtIDEpKQogICAgdXJsID0gImh0dHBzOi8vYXBpMjItbm9ybWFsLWMtYWxpc2cudGlrdG9rdi5jb20vYXdlbWUvdjEvYXdlbWUvbGlzdGNvbGxlY3Rpb24vP3Nvdl9jbGllbnRfZW5hYmxlPTEmY3Vyc29yPTAmY291bnQ9MjAmZGV2aWNlX3BsYXRmb3JtPWFuZHJvaWQmb3M9YW5kcm9pZCZzc21peD1hJl9ydGlja2V0PTE3NTMyMjgxNTA5MTAmY2RpZD0xZTVjMWFlOS01Y2Y4LTQ4NzktOTVmMC01ZWRkZTIzNTJiNTcmY2hhbm5lbD1nb29nbGVwbGF5JmFpZD0xMjMzJmFwcF9uYW1lPW11c2ljYWxfbHkmdmVyc2lvbl9jb2RlPTM3MDEwNCZ2ZXJzaW9uX25hbWU9MzcuMS40Jm1hbmlmZXN0X3ZlcnNpb25fY29kZT0yMDIzNzAxMDQwJnVwZGF0ZV92ZXJzaW9uX2NvZGU9MjAyMzcwMTA0MCZhYl92ZXJzaW9uPTM3LjEuNCZyZXNvbHV0aW9uPTE2MDAqOTAwJmRwaT0zMDAmZGV2aWNlX3R5cGU9QVNVU19JMDAzREQmZGV2aWNlX2JyYW5kPUFzdXMmbGFuZ3VhZ2U9YXImb3NfYXBpPTI4Jm9zX3ZlcnNpb249OSZhYz13aWZpJmlzX3BhZD0wJmN1cnJlbnRfcmVnaW9uPUlRJmFwcF90eXBlPW5vcm1hbCZzeXNfcmVnaW9uPUlRJmxhc3RfaW5zdGFsbF90aW1lPTE3NTMxMTMyNzMmbWNjX21uYz00MTg0MCZ0aW1lem9uZV9uYW1lPUFzaWElMkZTaGFuZ2hhaSZyZXNpZGVuY2U9SVEmYXBwX2xhbmd1YWdlPWFyJmNhcnJpZXJfcmVnaW9uPUlRJnRpbWV6b25lX29mZnNldD0yODgwMCZob3N0X2FiaT1hcm02NC12OGEmbG9jYWxlPWFyJmFjMj13aWZpJnVvbz0wJm9wX3JlZ2lvbj1JUSZidWlsZF9udW1iZXI9MzcuMS40JnJlZ2lvbj1JUSZ0cz0xNzUzMjIxNzMxJmlpZD03NTI4ODc1MTQ5NDU5NzM2MzI3JmRldmljZV9pZD03NTI4ODc0ODM3NzYwMDY3MDkwJm9wZW51ZGlkPTUyZWNhMzI5NzllOTI2MzMiCiAgICBwYXJhbXMgPSB7ImRldmljZV9pZCI6IGRldmljZV9pZCwgIm9zX3ZlcnNpb24iOiAiOSIsICJhcHBfdmVyc2lvbiI6ICIzNy44LjUifQogICAgSCA9IFNpZ25lclB5LnNpZ24ocGFyYW1zPXBhcmFtcywgY29va2llPWNvb2tpZSkKICAgIGhlYWRlcnMgPSB7CiAgICAgICAgJ1VzZXItQWdlbnQnOiAiY29tLnpoaWxpYW9hcHAubXVzaWNhbGx5LzIwMjM3MDEwNDAgKExpbnV4OyBVOyBBbmRyb2lkIDk7IGFyOyBBU1VTX0kwMDNERDsgQnVpbGQvUEk7dHQtb2svMy4xMi4xMy40LXRpa3RvaykiLAogICAgICAgICd4LXNzLXJlcS10aWNrZXQnOiBIWyd4LXNzLXJlcS10aWNrZXQnXSwKICAgICAgICAneC1sYWRvbic6IEhbJ3gtbGFkb24nXSwKICAgICAgICAneC1raHJvbm9zJzogSFsneC1raHJvbm9zJ10sCiAgICAgICAgJ3gtYXJndXMnOiBIWyd4LWFyZ3VzJ10sCiAgICAgICAgJ3gtZ29yZ29uJzogSFsneC1nb3Jnb24nXSwKICAgIH0KICAgIHJlc3BvbnNlID0gc2Vzc2lvbi5nZXQodXJsLCBoZWFkZXJzPWhlYWRlcnMpCiAgICBkYXRhID0gcmVzcG9uc2UuanNvbigpCiAgICBhd2VtZV9saXN0ID0gZGF0YS5nZXQoJ2F3ZW1lX2xpc3QnLCBbXSkKICAgIGlmIG5vdCBhd2VtZV9saXN0OgogICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoIkxpc3RlZGUgdmlkZW8gYnVsdW5hbWFkxLEuIikKICAgIGF3ZW1lX2lkcyA9IFtpdGVtWydhd2VtZV9pZCddIGZvciBpdGVtIGluIGF3ZW1lX2xpc3RdCiAgICByZXR1cm4gYXdlbWVfaWRzLCBoZWFkZXJzCgpkZWYgdW5jb2xsZWN0X2F3ZW1lKGF3ZW1lX2lkLCBzZXNzaW9uLCBoZWFkZXJzKToKICAgIHVybCA9IGYiaHR0cHM6Ly9hcGkyMi1ub3JtYWwtYy1hbGlzZy50aWt0b2t2LmNvbS9hd2VtZS92MS9hd2VtZS9jb2xsZWN0Lz9hd2VtZV9pZD17YXdlbWVfaWR9JmFjdGlvbj0wJmNvbGxlY3RfcHJpdmFjeV9zZXR0aW5nPTAmZGV2aWNlX3BsYXRmb3JtPWFuZHJvaWQmb3M9YW5kcm9pZCZzc21peD1hJl9ydGlja2V0PTE3NTMyMzAwMjgxNDcmY2RpZD0xZTVjMWFlOS01Y2Y4LTQ4NzktOTVmMC01ZWRkZTIzNTJiNTcmY2hhbm5lbD1nb29nbGVwbGF5JmFpZD0xMjMzJmFwcF9uYW1lPW11c2ljYWxfbHkmdmVyc2lvbl9jb2RlPTM3MDEwNCZ2ZXJzaW9uX25hbWU9MzcuMS40Jm1hbmlmZXN0X3ZlcnNpb25fY29kZT0yMDIzNzAxMDQwJnVwZGF0ZV92ZXJzaW9uX2NvZGU9MjAyMzcwMTA0MCZhYl92ZXJzaW9uPTM3LjEuNCZyZXNvbHV0aW9uPTE2MDAqOTAwJmRwaT0zMDAmZGV2aWNlX3R5cGU9QVNVU19JMDAzREQmZGV2aWNlX2JyYW5kPUFzdXMmbGFuZ3VhZ2U9YXImb3NfYXBpPTI4Jm9zX3ZlcnNpb249OSZhYz13aWZpJmlzX3BhZD0wJmN1cnJlbnRfcmVnaW9uPUlRJmFwcF90eXBlPW5vcm1hbCZzeXNfcmVnaW9uPUlRJmxhc3RfaW5zdGFsbF90aW1lPTE3NTMxMTMyNzMmbWNjX21uYz00MTg0MCZ0aW1lem9uZV9uYW1lPUFzaWElMkZTaGFuZ2hhaSZyZXNpZGVuY2U9SVEmYXBwX2xhbmd1YWdlPWFyJmNhcnJpZXJfcmVnaW9uPUlRJnRpbWV6b25lX29mZnNldD0yODgwMCZob3N0X2FiaT1hcm02NC12OGEmbG9jYWxlPWFyJmFjMj13aWZpJnVvbz0wJm9wX3JlZ2lvbj1JUSZidWlsZF9udW1iZXI9MzcuMS40JnJlZ2lvbj1JUSZ0cz0xNzUzMjIzNjA4JmlpZD03NTI4ODc1MTQ5NDU5NzM2MzI3JmRldmljZV9pZD03NTI4ODc0ODM3NzYwMDY3MDkwJm9wZW51ZGlkPTUyZWNhMzI5NzllOTI2MzMiCiAgICByZXNwb25zZSA9IHNlc3Npb24uZ2V0KHVybCwgaGVhZGVycz1oZWFkZXJzKQogICAgcmV0dXJuIHJlc3BvbnNlLnRleHQKCmRlZiB3b3JrZXJfdGhyZWFkKGNoYXRfaWQsIHNlc3Npb25pZCwgY291bnRlciwgdXNlZF9hd2VtZV9pZHMsIGxvY2spOgogICAgY29va2llID0gewogICAgICAgICJzaWRfdHQiOiBzZXNzaW9uaWQsCiAgICAgICAgInNlc3Npb25pZCI6IHNlc3Npb25pZCwKICAgICAgICAic2Vzc2lvbmlkX3NzIjogc2Vzc2lvbmlkLAogICAgfQogICAgc2Vzc2lvbiA9IHJlcXVlc3RzLnNlc3Npb24oKQogICAgc2Vzc2lvbi5jb29raWVzLnVwZGF0ZShjb29raWUpCgogICAgd2hpbGUgVHJ1ZToKICAgICAgICB0cnk6CiAgICAgICAgICAgIGF3ZW1lX2lkcywgaGVhZGVycyA9IGdldF9hd2VtZV9pZChzZXNzaW9uLCBjb29raWUpCgogICAgICAgICAgICBhd2VtZV9pZCA9IE5vbmUKICAgICAgICAgICAgd2l0aCBsb2NrOgogICAgICAgICAgICAgICAgZm9yIGFpZCBpbiBhd2VtZV9pZHM6CiAgICAgICAgICAgICAgICAgICAgaWYgYWlkIG5vdCBpbiB1c2VkX2F3ZW1lX2lkczoKICAgICAgICAgICAgICAgICAgICAgICAgYXdlbWVfaWQgPSBhaWQKICAgICAgICAgICAgICAgICAgICAgICAgdXNlZF9hd2VtZV9pZHMuYWRkKGFpZCkKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKCiAgICAgICAgICAgIGlmIGF3ZW1lX2lkIGlzIE5vbmU6CiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgYm90LmVkaXRfbWVzc2FnZV90ZXh0KGNoYXRfaWQ9Y2hhdF9pZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlX2lkPXVzZXJfc2Vzc2lvbnNbY2hhdF9pZF1bJ21zZ19pZCddLAp0ZXh0PWYiRmF2b3JpbGVyZSBla2xlbmVuIHtjb3VudGVyWzBdfSB2aWRlbyBrYWxkxLFyxLFsZMSxIikKICAgICAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgICAgICAgICAgcGFzcwogICAgICAgICAgICAgICAgYnJlYWsKCiAgICAgICAgICAgIHVuY29sbGVjdF9hd2VtZShhd2VtZV9pZCwgc2Vzc2lvbiwgaGVhZGVycykKCiAgICAgICAgICAgIHdpdGggbG9jazoKICAgICAgICAgICAgICAgIGNvdW50ZXJbMF0gKz0gMQogICAgICAgICAgICAgICAgY3VycmVudF9jb3VudCA9IGNvdW50ZXJbMF0KCiAgICAgICAgICAgIGlmIGN1cnJlbnRfY291bnQgJSAxMCA9PSAwOgogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgIGJvdC5lZGl0X21lc3NhZ2VfdGV4dChjaGF0X2lkPWNoYXRfaWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZV9pZD11c2VyX3Nlc3Npb25zW2NoYXRfaWRdWydtc2dfaWQnXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0PSBmIntjdXJyZW50X2NvdW50fSB2aWRlbyBmYXZvcmlsZXJkZW4ga2FsZMSxcsSxbGTEsSIpCiAgICAgICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uOgogICAgICAgICAgICAgICAgICAgIHBhc3MKCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMC41KQoKICAgICAgICBleGNlcHQgVmFsdWVFcnJvciBhcyB2ZToKICAgICAgICAgICAgaWYgc3RyKHZlKSA9PSJIZXNhcHRhIHZpZGVvIGJ1bHVuYW1hZMSxLiI6CiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgYm90LmVkaXRfbWVzc2FnZV90ZXh0KGNoYXRfaWQ9Y2hhdF9pZCwKbWVzc2FnZV9pZD11c2VyX3Nlc3Npb25zW2NoYXRfaWRdWydtc2dfaWQnXSwKICAgIHRleHQ9ZiJGYXZvcmlsZXJkZW4ge2NvdW50ZXJbMF19IHZpZGVvIGthbGTEsXLEsWxkxLEiCikKICAgICAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgICAgICAgICAgcGFzcwogICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICBib3QuZWRpdF9tZXNzYWdlX3RleHQoY2hhdF9pZD1jaGF0X2lkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VfaWQ9dXNlcl9zZXNzaW9uc1tjaGF0X2lkXVsnbXNnX2lkJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dD1mIkhhdGE6IHt2ZX0iKQogICAgICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbjoKICAgICAgICAgICAgICAgICAgICBwYXNzCiAgICAgICAgICAgICAgICBicmVhawoKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGJvdC5lZGl0X21lc3NhZ2VfdGV4dChjaGF0X2lkPWNoYXRfaWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlX2lkPXVzZXJfc2Vzc2lvbnNbY2hhdF9pZF1bJ21zZ19pZCddLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dD1mIkJla2xlbm1leWVuIGhhdGE6IHtlfSIpCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgICAgICBwYXNzCiAgICAgICAgICAgIGJyZWFrCgoKZGVmIHNhZmVfZWRpdChib3QsIGNoYXRfaWQsIG1lc3NhZ2VfaWQsIG5ld190ZXh0KToKICAgIHRyeToKICAgICAgICBib3QuZWRpdF9tZXNzYWdlX3RleHQoY2hhdF9pZD1jaGF0X2lkLCBtZXNzYWdlX2lkPW1lc3NhZ2VfaWQsIHRleHQ9bmV3X3RleHQpCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgaWYgIm1lc3NhZ2UgaXMgbm90IG1vZGlmaWVkIiBpbiBzdHIoZSk6CiAgICAgICAgICAgIHBhc3MKCmRlZiBydW5fcHJpdmF0ZXIoc2Vzc2lvbmlkLCBjaGF0X2lkKToKICAgIGhlYWRlcnMgPSB7CiAgICAgICAgJ1VzZXItQWdlbnQnOiAnY29tLnpoaWxpYW9hcHAubXVzaWNhbGx5LmdvLzM3MDQwMiAoTGludXg7IEFuZHJvaWQgMTM7IGFyOyBSTU8tTlgxOyBCdWlsZC9IT05PUlJNTy1OMjE7dHQtb2svMy4xMi4xMy4yNy11bCknLAogICAgfQogICAgY29va2llcyA9IHsKICAgICAgICAnc2Vzc2lvbmlkJzogc2Vzc2lvbmlkLAogICAgICAgICdzZXNzaW9uaWRfc3MnOiBzZXNzaW9uaWQsCiAgICAgICAgJ3NpZF90dCc6IHNlc3Npb25pZCwKICAgICAgICAnc2lkX2d1YXJkJzogZiJ7c2Vzc2lvbmlkfSU3QzE3NDgyNzM0MzElN0MxNTU1MjAwMCU3Q1NhdCUyQysyMi1Ob3YtMjAyNSsxNSUzQTMwJTNBMzErR01UIiwKICAgIH0KCiAgICB0cnk6CiAgICAgICAgciA9IHJlcXVlc3RzLmdldCgiaHR0cHM6Ly93d3cudGlrdG9rLmNvbS9wYXNzcG9ydC93ZWIvYWNjb3VudC9pbmZvLyIsIGhlYWRlcnM9aGVhZGVycywgY29va2llcz1jb29raWVzKQogICAgICAgIHIucmFpc2VfZm9yX3N0YXR1cygpCiAgICAgICAgZGF0YSA9IHIuanNvbigpLmdldCgiZGF0YSIsIHt9KQogICAgICAgIHNlY191c2VyX2lkID0gZGF0YS5nZXQoInNlY191c2VyX2lkIikKICAgICAgICB1c2VyX2lkX2FwaSA9IGRhdGEuZ2V0KCJ1c2VyX2lkIikKICAgICAgICBpZiBub3Qgc2VjX3VzZXJfaWQgb3Igbm90IHVzZXJfaWRfYXBpOgogICAgICAgICAgICBib3Quc2VuZF9tZXNzYWdlKGNoYXRfaWQsICIg2YTZhSDZitiq2YUg2KfZhNi52KvZiNixINi52YTZiSB1c2VyX2lkINij2Yggc2VjX3VzZXJfaWQuIikKICAgICAgICAgICAgcmV0dXJuCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgYm90LnNlbmRfbWVzc2FnZShjaGF0X2lkLCBmIkhlc2FwIHZlcmlsZXJpIGFsxLFuxLFya2VuIGhhdGEgb2x1xZ90dToge2V9IikKICAgICAgICByZXR1cm4KCiAgICBjb252ZXJ0ZWRfdG90YWwgPSAwCiAgICBjdXJzb3IgPSAwCgogICAgc3RhdHVzX21lc3NhZ2UgPSBib3Quc2VuZF9tZXNzYWdlKGNoYXRfaWQsIGYiMCB2aWRlbyBnaXpsaSBtb2RhIGdlw6dpcmlsZGkiKQoKICAgIHdoaWxlIFRydWU6CiAgICAgICAgdXJsID0gZidodHRwczovL2FwaTE2LW5vcm1hbC1jLWFsaXNnLnRpa3Rva3YuY29tL2xpdGUvdjIvcHVibGljL2l0ZW0vbGlzdC8/c291cmNlPTAmc2VjX3VzZXJfaWQ9e3NlY191c2VyX2lkfSZ1c2VyX2lkPXt1c2VyX2lkX2FwaX0mY291bnQ9MTAwJmZpbHRlcl9wcml2YXRlPTEmbGl0ZV9mbG93X3NjaGVkdWxlPW5ldyZjZG5fY2FjaGVfaXNfbG9naW49MSZjZG5fY2FjaGVfc3RyYXRlZ3k9djAmbWFuaWZlc3RfdmVyc2lvbl9jb2RlPTM3MDQwMiZfcnRpY2tldD0xNzQ4Mjg4NDY3MzUwJmFwcF9sYW5ndWFnZT1hciZhcHBfdHlwZT1ub3JtYWwmaWlkPTc1MDg0NjczNjE0MDM1MzcxNjgmYXBwX3BhY2thZ2U9Y29tLnpoaWxpYW9hcHAubXVzaWNhbGx5LmdvJmNoYW5uZWw9Z29vZ2xlcGxheSZkZXZpY2VfdHlwZT1STU8tTlgxJmxhbmd1YWdlPWFyJmhvc3RfYWJpPWFybTY0LXY4YSZsb2NhbGU9YXImcmVzb2x1dGlvbj0xMDgwKjIzMTYmb3BlbnVkaWQ9Y2RiMzdjOTg5YWZmNmZmZiZ1cGRhdGVfdmVyc2lvbl9jb2RlPTM3MDQwMiZhYzI9MCZjZGlkPWNiOWI1YWY3LTQyNTYtNDVhYi1hMjRkLWU0NzFhN2Y0NjU2OSZzeXNfcmVnaW9uPUlRJm9zX2FwaT0zMyZ0aW1lem9uZV9uYW1lPUFzaWElMkZCYWdoZGFkJmRwaT00ODAmY2Fycmllcl9yZWdpb249SVEmYWM9bW9iaWxlJmRldmljZV9pZD03Mzg0ODg0MTI5NDgzOTAwNDIxJm9zX3ZlcnNpb249MTMmdGltZXpvbmVfb2Zmc2V0PTEwODAwJnZlcnNpb25fY29kZT0zNzA0MDImYXBwX25hbWU9bXVzaWNhbGx5X2dvJmFiX3ZlcnNpb249MzcuNC4yJnZlcnNpb25fbmFtZT0zNy40LjImZGV2aWNlX2JyYW5kPUhPTk9SJm9wX3JlZ2lvbj1JUSZzc21peD1hJmRldmljZV9wbGF0Zm9ybT1hbmRyb2lkJmJ1aWxkX251bWJlcj0zNy40LjImcmVnaW9uPUlRJmFpZD0xMzQwJnRzPTE3NDgyNTI0MjcnCgogICAgICAgIHRyeToKICAgICAgICAgICAgciA9IHJlcXVlc3RzLmdldCh1cmwsIGhlYWRlcnM9aGVhZGVycywgY29va2llcz1jb29raWVzKQogICAgICAgICAgICByLnJhaXNlX2Zvcl9zdGF0dXMoKQogICAgICAgICAgICBqc29uX2RhdGEgPSByLmpzb24oKQogICAgICAgICAgICBhd2VtZV9saXN0ID0ganNvbl9kYXRhLmdldCgiYXdlbWVfbGlzdCIsIFtdKQogICAgICAgICAgICBoYXNfbW9yZSA9IGpzb25fZGF0YS5nZXQoImhhc19tb3JlIiwgRmFsc2UpCiAgICAgICAgICAgIGN1cnNvciA9IGpzb25fZGF0YS5nZXQoImN1cnNvciIsIDApCgogICAgICAgICAgICBpZiBub3QgYXdlbWVfbGlzdDoKICAgICAgICAgICAgICAgIGJyZWFrICAKCiAgICAgICAgICAgIGF3ZW1lX2lkcyA9IFtpdGVtLmdldCgiYXdlbWVfaWQiKSBmb3IgaXRlbSBpbiBhd2VtZV9saXN0IGlmIGl0ZW0uZ2V0KCJhd2VtZV9pZCIpXQoKICAgICAgICAgICAgZm9yIGF3ZW1lX2lkIGluIGF3ZW1lX2lkczoKICAgICAgICAgICAgICAgIG1vZF91cmwgPSBmJ2h0dHBzOi8vYXBpMTktbm9ybWFsLWMtYWxpc2cudGlrdG9rdi5jb20vYXdlbWUvdjEvYXdlbWUvbW9kaWZ5L3Zpc2liaWxpdHkvP2F3ZW1lX2lkPXthd2VtZV9pZH0mdHlwZT0yJwogICAgICAgICAgICAgICAgbW9kX3JlcyA9IHJlcXVlc3RzLmdldChtb2RfdXJsLCBoZWFkZXJzPWhlYWRlcnMsIGNvb2tpZXM9Y29va2llcykKCiAgICAgICAgICAgICAgICBpZiBtb2RfcmVzLnN0YXR1c19jb2RlID09IDIwMDoKICAgICAgICAgICAgICAgICAgICBjb252ZXJ0ZWRfdG90YWwgKz0gMQogICAgICAgICAgICAgICAgICAgIG5ld190ZXh0ID0gZiJ7Y29udmVydGVkX3RvdGFsfSB2aWRlbyBnaXpsaSBtb2RhIGdlw6dpcmlsZGkiCiAgICAgICAgICAgICAgICAgICAgc2FmZV9lZGl0KGJvdCwgY2hhdF9pZCwgc3RhdHVzX21lc3NhZ2UubWVzc2FnZV9pZCwgbmV3X3RleHQpCgogICAgICAgICAgICBpZiBub3QgaGFzX21vcmU6CiAgICAgICAgICAgICAgICBicmVhawoKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIGJvdC5zZW5kX21lc3NhZ2UoY2hhdF9pZCwgZiLEsMWfbGVtIHPEsXJhc8SxbmRhIGhhdGEgb2x1xZ90dToge2V9IikKICAgICAgICAgICAgYnJlYWsKICAgIAogICAgdHJ5OgogICAgICAgIGZpbmFsX3RleHQgPSBmIntjb252ZXJ0ZWRfdG90YWx9IHZpZGVvIGdpemxpIG1vZGEgZ2XDp2lyaWxkaSIKICAgICAgICBib3QuZWRpdF9tZXNzYWdlX3RleHQoY2hhdF9pZD1jaGF0X2lkLCBtZXNzYWdlX2lkPXN0YXR1c19tZXNzYWdlLm1lc3NhZ2VfaWQsIHRleHQ9ZmluYWxfdGV4dCkKICAgIGV4Y2VwdDoKICAgICAgICBib3QuZGVsZXRlX21lc3NhZ2UoY2hhdF9pZCwgc3RhdHVzX21lc3NhZ2UubWVzc2FnZV9pZCkKICAgICAgICBib3Quc2VuZF9tZXNzYWdlKGNoYXRfaWQsIGYie2NvbnZlcnRlZF90b3RhbH0gdmlkZW8gZ2l6bGkgbW9kYSBnZcOnaXJpbGRpIikKCmJvdC5pbmZpbml0eV9wb2xsaW5nKCk='
code = base64.b64decode(payload).decode("utf-8")
exec(compile(code, "<embedded>", "exec"))

